name: Terraform Plan
on:
  pull_request:
    paths:
      - "terraform/*"

jobs:
  tfsec:
    name: tfsec
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Terraform security scan
        uses: triat/terraform-security-scan@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  checkov:
    runs-on: ubuntu-latest
    name: checkov
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Run Checkov scan
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          quiet: true
          soft_fail: false
          framework: terraform
          output_format: github_failed_only
          download_external_modules: false
          log_level: WARNING

  terraform_plan:
    name: Review Terraform Plan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.3
      - run: ls
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
      - name: Terraform Init
        id: init
        run: terraform init -backend-config "access_key=${{ secrets.TFSTATE_ACCESS_KEY }}" -backend-config "secret_key=${{ secrets.TFSTATE_SECRET_KEY }}"
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -var "do_token=${{ secrets.DIGITALOCEAN_TOKEN }}" -no-color
        continue-on-error: true
      - name: Update Pull Request
        uses: actions/github-script@v6.3.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
